<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Brand;
use AppBundle\Entity\Car;
use AppBundle\Entity\Configuration;
use AppBundle\Entity\Project;
use AppBundle\Entity\Question;
use AppBundle\Entity\Relation;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;
/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends \Doctrine\ORM\EntityRepository
{
    public function getProjectList()
    {
        $em = $this->getEntityManager();
        $db = $em->getRepository("AppBundle:Project")
            ->createQueryBuilder('p')
            ->where('p.del = 0')
            ->orderBy('p.id','desc');
        return $db;
    }

    public function getByName($name,$flg='insert',$id=0){
        $em = $this->getEntityManager();
        $rs = $em->getRepository("AppBundle:Project");
        $rs = $rs->createQueryBuilder('p');
        if($flg == 'update'){
            $rs = $rs->where('p.del = 0 and p.name = :name and p.id <> :id');
            $rs = $rs->setParameters(['name' => $name,'id' => $id]);
        }else{
            $rs = $rs->where('p.del = 0 and p.name = :name');
            $rs = $rs->setParameter('name',$name);
        }
        $rs = $rs->getQuery();
        return $rs->getResult();
    }

    public function updateProject(){
        $request = Request::createFromGlobals();
        $id = $request->request->get('id');
        $name = $request->request->get('name');
        $em = $this->getEntityManager();
        $project = $em->getRepository('AppBundle:Project')->find($id);
        $rs = $this->getByName($name,'update',$id);
        if(!empty($rs)){
            return ['flg' => 'exist','msg' => '该项目已存在'];
        }
        $project->setName($name);
        $em->flush();
        return ['flg' => 'success','msg' => '保存成功'];
    }

    public function insertProject(){
        $name = Request::createFromGlobals()->request->get('name');
        $rs = $this->getByName($name);
        if(!empty($rs)){
            return ['flg' => 'exist','msg' => '该项目已存在'];
        }
        $project = new Project();
        $project->setName($name);
        $em = $this->getEntityManager();
        $em->persist($project);
        $em->flush();
        return ['flg' => 'success','msg' => '保存成功'];
    }

    public function deleteProject(){
        $id = Request::createFromGlobals()->request->get('id');
        $em = $this->getEntityManager();
        $project = $em->getRepository('AppBundle:Project')->find($id);
        $project->setDel(1);
        $em->flush();
        return ['flg' => 'success','msg' => '删除成功'];
    }

    public function import($phpExcelObject)
    {
        $em = $this->getEntityManager();
        $request = Request::createFromGlobals();
        $project_id = $request->request->get('id');
        $objWorksheet = $phpExcelObject->getActiveSheet();
        $ExcelArray = $objWorksheet->toArray();
        $highestRow = count($ExcelArray);
        if($highestRow == 0){
            $highestColumn = 0;
        }else{
            $highestColumn = count($ExcelArray[0]);
        }
        $configArray = [];
        $questionList = [];
        for ($col = 3;$col < $highestColumn - 1;$col++){
            $configuration = new Configuration();
            $configuration->setProjectId($project_id);
            $name = $ExcelArray[0][$col];
            $configuration->setName($name);
            $em->persist($configuration);
            $em->flush();
            $configArray[] = $configuration->getId();
        }
        for ($row = 1;$row < $highestRow;$row++){
            $brand = $ExcelArray[$row][1];
            $img = $ExcelArray[$row][2];
            $brand_id = $this->addBrand($project_id,$brand,$img);
            $carInfo = $ExcelArray[$row][$highestColumn - 1];
            $car = new Car();
            $car->setImg($carInfo);
            $car->setBrandId($brand_id);
            $em->persist($car);
            $em->flush();
            $car_id = $car->getId();
            for ($col = 3;$col < $highestColumn - 1;$col++){
                $val = $ExcelArray[$row][$col];
                $relation = new Relation();
                $relation->setCarId($car_id);
                $relation->setConfigId($configArray[$col - 3]);
                $relation->setVal($val);
                $em->persist($relation);
                $em->flush();
            }
            $question_no = $ExcelArray[$row][0];
            $questionList[$question_no][] = $car_id;
        }
        foreach ($questionList as $k => $v){
            $cars = implode(',',$v);
            $question = new Question();
            $question->setCarId($cars);
            $question->setProjectId($project_id);
            $em->persist($question);
            $em->flush();
        }
        return ['msg' => '导入成功'];
    }

    private function addBrand($project_id,$brand,$img){
        $b = new Brand();
        $em = $this->getEntityManager();
        $rs = $em->getRepository("AppBundle:Brand")
                ->createQueryBuilder('b')
                ->where('b.project_id = :project_id and b.brand = :brand')
                ->setParameters(['project_id' => $project_id,'brand' => $brand])
                ->getQuery()
                ->getResult();
        if(empty($rs)){
            $b->setProjectId($project_id);
            $b->setBrand($brand);
            $b->setImg($img);
            $em->persist($b);
            $em->flush();
            return $b->getId();
        }
        return $rs[0]->getId();
    }

    public function export($project_id,$php_excel)
    {
        $em = $this->getEntityManager();
        $rs = $em->getRepository("AppBundle:Answer")
            ->createQueryBuilder('a')
            ->where('a.project_id = :project_id')
            ->setParameters(['project_id' => $project_id])
            ->getQuery()
            ->getResult();
        $col = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
        $phpExcelObject = $php_excel->createPHPExcelObject();
        $phpExcelObject->getActiveSheet()->setTitle('Data');
        $phpExcelObject->setActiveSheetIndex(0);
        if(count($rs) > 0){
            $item = json_decode($rs[0]->getAnswer(),true);
            $len = count($item[0]['config']);
            $phpExcelObject->getActiveSheet()->setCellValue('A1','id');
            $phpExcelObject->getActiveSheet()->setCellValue('B1','card');
            for($i = 0;$i < $len;$i++){
                $phpExcelObject->getActiveSheet()->setCellValue($col[$i + 2].'1','v'.($i + 1));
            }
            $phpExcelObject->getActiveSheet()->setCellValue($col[$len + 2].'1','isSelect');
            foreach ($rs as $key => $val){
                $answer = json_decode($val->getAnswer(),true);
                foreach ($answer as $k => $item) {
                    $phpExcelObject->getActiveSheet()->setCellValue('A'.($k + 2),$item['no']);
                    $phpExcelObject->getActiveSheet()->setCellValue('B'.($k + 2),$item['card']);
                    for($i = 0;$i < $len;$i++){
                        $phpExcelObject->getActiveSheet()->setCellValue($col[$i + 2].($k + 2),$item['config'][$i]);
                    }
                    $phpExcelObject->getActiveSheet()->setCellValue($col[$len + 2].($k + 2),$item['isSelected']);
                }
            }
        }
        $writer = $php_excel->createWriter($phpExcelObject, 'Excel5');
        $response = $php_excel->createStreamedResponse($writer);
        $dispositionHeader = $response->headers->makeDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'stream-file.xls');
        $response->headers->set('Content-Type', 'text/vnd.ms-excel;charset=utf-8');
        $response->headers->set('Pragma', 'public');
        $response->headers->set('Cache-Control', 'maxage=1');
        $response->headers->set('Content-Disposition', $dispositionHeader);
        return $response;
    }
}
